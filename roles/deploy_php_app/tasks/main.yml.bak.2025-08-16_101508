---
- name: Générer l'identifiant de release
  set_fact:
    release_id: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

- name: Variables runtime
  set_fact:
    app_base: "/var/www/{{ app_name }}"
    releases_dir: "/var/www/{{ app_name }}/releases"
    new_release: "/var/www/{{ app_name }}/releases/{{ release_id }}"
    current_link: "/var/www/{{ app_name }}/current"

- name: Créer arborescence releases + data
  file:
    path: "{{ item }}"
    state: directory
    owner: www-data
    group: www-data
    mode: "0750"
  loop:
    - "{{ releases_dir }}"
    - "/var/www/{{ app_name }}/data"
  become: true

- name: Cloner la release depuis Git (branche/tag)
  command: >
    git clone --branch {{ app_tag }} --depth 1 {{ app_repo_url }} {{ new_release }}
  args:
    creates: "{{ new_release }}"
  become: true

- name: Droits sur la release
  file:
    path: "{{ new_release }}"
    owner: www-data
    group: www-data
    recurse: yes
  become: true

# --- PRÉSERVATION DOLIBARR (si applicable) ---
- name: Vérifier conf.php courant (Dolibarr)
  stat:
    path: "{{ current_link }}/htdocs/conf/conf.php"
  register: cur_conf
  become: true

- name: Créer dossier conf dans la nouvelle release
  when: cur_conf.stat.exists | default(false)
  file:
    path: "{{ new_release }}/htdocs/conf"
    state: directory
    owner: www-data
    group: www-data
    mode: "0750"
  become: true

- name: Copier conf.php courant vers nouvelle release
  when: cur_conf.stat.exists | default(false)
  copy:
    src: "{{ current_link }}/htdocs/conf/conf.php"
    dest: "{{ new_release }}/htdocs/conf/conf.php"
    owner: www-data
    group: www-data
    mode: "0640"
    remote_src: true
  become: true

- name: Vérifier dossier custom courant (Dolibarr)
  stat:
    path: "{{ current_link }}/htdocs/custom"
  register: cur_custom
  become: true

- name: Copier custom vers la nouvelle release (préserve modules)
  when: cur_custom.stat.isdir | default(false)
  shell: "rsync -a --delete '{{ current_link }}/htdocs/custom/' '{{ new_release }}/htdocs/custom/'"
  args:
    chdir: "{{ app_base }}"
  become: true
# --- FIN PRÉSERVATION ---

- name: Mémoriser l'ancienne cible du symlink (si existe)
  stat:
    path: "{{ current_link }}"
  register: current_stat
  become: true

- name: Enregistrer ancienne release
  set_fact:
    previous_release: "{{ current_stat.stat.lnk_source | default('') }}"

- block:
    - name: Bascule symlink "current" vers la nouvelle release
      file:
        src: "{{ new_release }}"
        dest: "{{ current_link }}"
        state: link
        force: true
      become: true

    - name: Test de config Nginx
      command: nginx -t
      become: true

    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded
      become: true

    - name: Restart PHP-FPM 8.2
      systemd:
        name: php8.2-fpm
        state: restarted
      become: true

    - name: Post-check HTTP (200/301/302/403 acceptés)
      uri:
        url: "{{ check_url }}"
        method: GET
        status_code: [200,301,302,403]
        return_content: no
        validate_certs: no
      register: http_check
      changed_when: false

  rescue:
    - name: Rollback symlink sur l'ancienne release (si connue)
      when: previous_release != ''
      file:
        src: "{{ previous_release }}"
        dest: "{{ current_link }}"
        state: link
        force: true
      become: true

    - name: Reload Nginx (après rollback)
      systemd:
        name: nginx
        state: reloaded
      become: true

    - name: Restart PHP-FPM 8.2 (après rollback)
      systemd:
        name: php8.2-fpm
        state: restarted
      become: true

    - name: Échec explicite
      fail:
        msg: "Déploiement {{ app_name }} échoué, rollback effectué."

# === FALLBACK LEGACY POUR PREMIER DEPLOIEMENT ===
- name: Vérifier conf.php legacy (Dolibarr)
  stat:
    path: "/var/www/{{ app_name }}/htdocs/conf/conf.php"
  register: legacy_conf
  become: true

- name: Copier conf.php legacy -> nouvelle release (si current absent)
  when: (not cur_conf.stat.exists | default(false)) and (legacy_conf.stat.exists | default(false))
  copy:
    src: "/var/www/{{ app_name }}/htdocs/conf/conf.php"
    dest: "{{ new_release }}/htdocs/conf/conf.php"
    owner: www-data
    group: www-data
    mode: "0640"
    remote_src: true
  become: true

- name: Vérifier custom legacy (Dolibarr)
  stat:
    path: "/var/www/{{ app_name }}/htdocs/custom"
  register: legacy_custom
  become: true

- name: Copier custom legacy -> nouvelle release (si current absent)
  when: (not cur_custom.stat.isdir | default(false)) and (legacy_custom.stat.isdir | default(false))
  shell: "rsync -a --delete '/var/www/{{ app_name }}/htdocs/custom/' '{{ new_release }}/htdocs/custom/'"
  args:
    chdir: "{{ app_base }}"
  become: true

- name: Détecter présence de htdocs/ dans la nouvelle release
  stat:
    path: "{{ new_release }}/htdocs/index.php"
  register: new_has_htdocs
  become: true

- name: Détecter index.php à la racine de la nouvelle release
  stat:
    path: "{{ new_release }}/index.php"
  register: new_root_index
  become: true

- name: Basculer docroot -> .../current si htdocs absent mais index à la racine (Dolibarr)
  when: (not new_has_htdocs.stat.exists | default(false)) and (new_root_index.stat.exists | default(false)) and (app_name is match('^dolibarr_'))
  lineinfile:
    path: "/etc/nginx/sites-available/{{ 'dlb.businessboost.nc.conf' if app_name == 'dolibarr_businessboost' else ('dlb.cybermedia.nc.conf' if app_name == 'dolibarr_groupecyber' else 'dlb-demo.businessboost.nc.conf') }}"
    regexp: '^\s*root\s+.*current/htdocs'
    line: '    root /var/www/{{ app_name }}/current;'
    backrefs: no
  notify: reload nginx
  become: true
