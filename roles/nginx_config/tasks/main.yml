---
# Clone the Nginx config repo onto the target host, then deploy selected vhosts.

- name: Ensure working dir exists
  become: true
  file:
    path: /opt/nginx-config
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Cloner le repo Nginx
  become: true
  git:
    repo: "{{ nginx_config_repo }}"
    version: "{{ nginx_config_ref | default('main') }}"
    dest: /opt/nginx-config
    accept_hostkey: true
    force: true
    update: true

- name: D√©ployer vhosts s√©lectionn√©s dans sites-available
  become: true
  copy:
    src: "/opt/nginx-config/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-available/{{ item }}"
    owner: root
    group: root
    mode: "0644"
    backup: true
    remote_src: true          # <<< IMPORTANT: les fichiers sont sur la machine distante
  loop: "{{ nginx_enabled_sites }}"

- name: Activer les vhosts (symlinks dans sites-enabled)
  become: true
  file:
    src: "/etc/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-enabled/{{ item }}"
    state: link
    force: true
  loop: "{{ nginx_enabled_sites }}"

# Optionnel: retirer des symlinks obsol√®tes non list√©s dans nginx_enabled_sites
- name: Lister les symlinks actuels
  become: true
  find:
    paths: /etc/nginx/sites-enabled
    file_type: link
  register: se_links

- name: D√©sactiver les vhosts non list√©s
  become: true
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ se_links.files }}"
  when: (item.path | basename) not in nginx_enabled_sites

- name: Lister les vhosts sur la cible
  become: true
  find:
    paths: /etc/nginx/sites-available
    patterns: "*.conf"
    file_type: file
  register: nginx_vhosts

- name: D√©sactiver default_server sur 443 s‚Äôil existe
  become: true
  replace:
    path: "{{ item.path }}"
    regexp: '(listen\s+443[^;]*)\s+default_server;'
    replace: '\1;'
  loop: "{{ nginx_vhosts.files }}"

- name: Test nginx config
  become: true
  command: nginx -t
  register: nginx_test
  changed_when: false

- name: Reload nginx si OK
  become: true
  systemd:
    name: nginx
    state: reloaded
  when: nginx_test.rc == 0

- name: Deploy restler fastcgi snippet
  copy:
    src: files/fastcgi-php-restler.conf
    dest: /etc/nginx/snippets/fastcgi-php-restler.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload nginx

- name: Ensure dlb vhosts include restler snippet (idempotent)
  replace:
    path: "/etc/nginx/sites-enabled/{{ item }}"
    regexp: '(^\s*location\s+~\s+\\\.php\$\s*\{(?![\s\S]*fastcgi-php-restler\.conf))'
    replace: '\1\n        include snippets/fastcgi-php-restler.conf;'
  with_items:
    - dlb-demo.businessboost.nc.conf
    - dlb.businessboost.nc.conf
    - dlb.cybermedia.nc.conf
  notify: reload nginx


# -------------------------------------------------------------------------
# üîí Ajout : Supervision Certbot / Monit (auto-renouvellement SSL)
# -------------------------------------------------------------------------

- name: D√©ployer script de check Certbot
  become: true
  copy:
    content: |
      #!/bin/bash
      LOGFILE="/var/log/letsencrypt/monit-certbot-check.log"
      DATE=$(date '+%Y-%m-%d %H:%M:%S')

      certbot renew --dry-run --quiet
      STATUS=$?

      if [ $STATUS -ne 0 ]; then
        echo "[$DATE] ‚ùå √âchec certbot renew --dry-run (code $STATUS)" >> "$LOGFILE"
        exit 1
      fi

      EXPIRING=$(certbot certificates 2>/dev/null | grep -B2 "INVALID\\|EXPIRED\\|VALID: [0-9]\\{1,2\\} day" | grep "Certificate Name" || true)
      if [ -n "$EXPIRING" ]; then
        echo "[$DATE] ‚ö†Ô∏è Certificat proche expiration : $EXPIRING" >> "$LOGFILE"
        exit 2
      fi

      echo "[$DATE] ‚úÖ Certbot OK - tous certificats valides" >> "$LOGFILE"
      exit 0
    dest: /usr/local/bin/certbot-renew-check.sh
    owner: root
    group: root
    mode: '0755'

- name: D√©ployer check Monit certbot-renew
  become: true
  copy:
    content: |
      CHECK PROGRAM certbot-renew WITH PATH "/usr/local/bin/certbot-renew-check.sh"
        IF STATUS != 0 THEN EXEC "/usr/local/bin/monit_webhook.sh 'Certbot renew failed on $(hostname)'"
        EVERY 2 CYCLES
    dest: /etc/monit/conf-enabled/certbot-renew
    owner: root
    group: root
    mode: '0644'

- name: Recharger Monit
  become: true
  command: monit reload
  changed_when: false

- name: V√©rifier syntaxe Monit
  become: true
  command: monit -t
  register: monit_check
  changed_when: false
  failed_when: monit_check.rc != 0
